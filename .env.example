# =============================================================================
# AutoCodit Agent Environment Configuration
# =============================================================================

# GitHub App Configuration
# -------------------------
# Get these values from your GitHub App settings
GITHUB_APP_ID=123456
GITHUB_PRIVATE_KEY="-----BEGIN RSA PRIVATE KEY-----\nYour private key here\n-----END RSA PRIVATE KEY-----"
GITHUB_WEBHOOK_SECRET=your-webhook-secret-here
GITHUB_BOT_LOGIN=autocodit-bot

# API Configuration
# -----------------
API_HOST=0.0.0.0
API_PORT=8000
API_BASE_URL=https://api.yourdomain.com
FRONTEND_URL=https://yourdomain.com

# Database Configuration
# ----------------------
DATABASE_URL=postgresql://autocodit:password@localhost:5432/autocodit_agent
REDIS_URL=redis://localhost:6379/0

# Security Configuration
# ----------------------
JWT_SECRET=your-super-secret-jwt-key-here-make-it-long-and-random
ENCRYPTION_KEY=your-32-character-encryption-key
WEBHOOK_VERIFICATION_TOKEN=your-webhook-verification-token

# AI Model Configuration
# ----------------------
# OpenAI
OPENAI_API_KEY=sk-your-openai-api-key-here
OPENAI_MODEL_PRIMARY=gpt-4-turbo-preview
OPENAI_MODEL_FALLBACK=gpt-3.5-turbo-16k
OPENAI_MAX_TOKENS=4096
OPENAI_TEMPERATURE=0.1

# Anthropic
ANTHROPIC_API_KEY=sk-ant-your-anthropic-api-key-here
ANTHROPIC_MODEL_PRIMARY=claude-3-sonnet-20240229
ANTHROPIC_MAX_TOKENS=4096
ANTHROPIC_TEMPERATURE=0.1

# Azure OpenAI (optional)
AZURE_OPENAI_API_KEY=your-azure-openai-key
AZURE_OPENAI_ENDPOINT=https://your-resource.openai.azure.com/
AZURE_OPENAI_DEPLOYMENT_NAME=gpt-4-turbo
AZURE_OPENAI_API_VERSION=2024-02-15-preview

# Local LLM Configuration (optional)
OLLAMA_BASE_URL=http://localhost:11434
OLLAMA_MODEL=codellama:34b

# Runner Configuration
# --------------------
RUNNER_MAX_CONCURRENT=10
RUNNER_DEFAULT_TIMEOUT=3600
RUNNER_DEFAULT_MEMORY=2Gi
RUNNER_DEFAULT_CPU=1000m
RUNNER_NETWORK_NAME=autocodit-runners
RUNNER_REGISTRY_URL=registry.yourdomain.com

# Container Configuration
# -----------------------
DOCKER_HOST=unix:///var/run/docker.sock
DOCKER_REGISTRY=autocodit
DOCKER_IMAGE_TAG=latest
CONTAINER_ISOLATION_MODE=gvisor  # docker, gvisor, firecracker

# Task Queue Configuration
# ------------------------
CELERY_BROKER_URL=redis://localhost:6379/1
CELERY_RESULT_BACKEND=redis://localhost:6379/1
TASK_QUEUE_MAX_RETRIES=3
TASK_QUEUE_RETRY_DELAY=60

# MCP Server Configuration
# ------------------------
MCP_SERVER_PORT=2301
MCP_SERVER_HOST=0.0.0.0
MCP_SERVER_TIMEOUT=30

# Security & Firewall
# -------------------
FIREWALL_ENABLED=true
FIREWALL_MODE=strict  # permissive, moderate, strict
FIREWALL_LOG_BLOCKED=true
FIREWALL_ALLOWLIST_DOMAINS=github.com,npmjs.org,pypi.org,docker.io,registry-1.docker.io

# Content Filtering
# -----------------
CONTENT_FILTER_ENABLED=true
CONTENT_FILTER_MODE=strict
HIDDEN_CHAR_FILTER=true

# Monitoring & Observability
# ---------------------------
LOG_LEVEL=INFO  # DEBUG, INFO, WARNING, ERROR
STRUCTURED_LOGGING=true
METRICS_ENABLED=true
METRICS_PORT=9090
TRACING_ENABLED=true
JAEGER_ENDPOINT=http://localhost:14268/api/traces

# Prometheus Metrics
PROMETHEUS_ENABLED=true
PROMETHEUS_PORT=9090
PROMETHEUS_PATH=/metrics

# Session Management
# ------------------
SESSION_TIMEOUT_MINUTES=60
SESSION_CLEANUP_INTERVAL=300
SESSION_MAX_CONCURRENT_PER_USER=5

# Rate Limiting
# -------------
RATE_LIMIT_ENABLED=true
RATE_LIMIT_REQUESTS_PER_MINUTE=60
RATE_LIMIT_BURST_SIZE=10

# Cost Management
# ---------------
COST_TRACKING_ENABLED=true
TOKEN_BUDGET_PER_TASK=50000
DAILY_TOKEN_LIMIT=1000000
COST_ALERT_THRESHOLD=100

# Backup & Storage
# ----------------
S3_ENDPOINT=http://localhost:9000
S3_ACCESS_KEY=minioadmin
S3_SECRET_KEY=minioadmin
S3_BUCKET_NAME=autocodit-storage
S3_REGION=us-east-1

# Email Configuration (optional)
# -------------------------------
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your-email@gmail.com
SMTP_PASSWORD=your-app-password
SMTP_FROM=AutoCodit Agent <noreply@yourdomain.com>

# Webhook Integrations (optional)
# --------------------------------
SLACK_WEBHOOK_URL=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK
DISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/YOUR/DISCORD/WEBHOOK
TEAMS_WEBHOOK_URL=https://outlook.office.com/webhook/YOUR/TEAMS/WEBHOOK

# Development Settings
# --------------------
DEBUG=false
HOT_RELOAD=false
DEV_MODE=false
PROFILING_ENABLED=false

# Feature Flags
# -------------
FEATURE_MOBILE_APP=true
FEATURE_CLI_TOOLS=true
FEATURE_WEB_DASHBOARD=true
FEATURE_VOICE_INPUT=false
FEATURE_ADVANCED_SECURITY=true
FEATURE_MULTI_TENANCY=false
FEATURE_ENTERPRISE_SSO=false

# Cache Configuration
# -------------------
CACHE_TTL_SECONDS=3600
CACHE_MAX_SIZE_MB=1024
CACHE_COMPRESSION=true

# Deployment Configuration
# ------------------------
DEPLOYMENT_ENV=development  # development, staging, production
HEALTH_CHECK_PATH=/health
READINESS_CHECK_PATH=/ready
LIVENESS_CHECK_PATH=/live

# Kubernetes Configuration (for production)
# ------------------------------------------
KUBERNETES_NAMESPACE=autocodit-agent
KUBERNETES_SERVICE_ACCOUNT=autocodit-runner
KUBERNETES_IMAGE_PULL_POLICY=Always

# External Service Integrations
# ------------------------------
# Sentry Error Tracking
SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id

# DataDog APM
DD_API_KEY=your-datadog-api-key
DD_APP_KEY=your-datadog-app-key
DD_SITE=datadoghq.com

# PagerDuty Alerts
PAGERDUTY_INTEGRATION_KEY=your-pagerduty-integration-key

# GitHub Enterprise (if using GitHub Enterprise Server)
GITHUB_ENTERPRISE_URL=https://github.yourdomain.com
GITHUB_API_URL=https://github.yourdomain.com/api/v3

# Custom MCP Servers
# ------------------
MCP_SENTRY_ENABLED=false
MCP_SENTRY_TOKEN=your-sentry-token

MCP_NOTION_ENABLED=false
MCP_NOTION_TOKEN=your-notion-integration-token

MCP_JIRA_ENABLED=false
MCP_JIRA_URL=https://yourcompany.atlassian.net
MCP_JIRA_EMAIL=your-email@company.com
MCP_JIRA_API_TOKEN=your-jira-api-token

# Advanced Configuration
# ----------------------
WORKER_THREADS=4
MAX_CONNECTIONS=1000
KEEP_ALIVE_TIMEOUT=65
GRACEFUL_SHUTDOWN_TIMEOUT=30
CONNECTION_POOL_SIZE=20
QUERY_TIMEOUT=30000