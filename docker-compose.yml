# =============================================================================
# AutoCodit Agent - Development Environment
# =============================================================================

version: '3.8'

services:
  # Core API Service
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://autocodit:password@db:5432/autocodit_agent
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - JWT_SECRET=dev-jwt-secret-key-change-in-production
      - GITHUB_APP_ID=${GITHUB_APP_ID}
      - GITHUB_PRIVATE_KEY=${GITHUB_PRIVATE_KEY}
      - GITHUB_WEBHOOK_SECRET=${GITHUB_WEBHOOK_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - LOG_LEVEL=DEBUG
      - HOT_RELOAD=true
      - DEV_MODE=true
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /var/run/docker.sock:/var/run/docker.sock  # For runner management
      - runner-workspace:/workspace
    networks:
      - autocodit
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Dashboard
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
      - NEXT_PUBLIC_APP_NAME=AutoCodit Agent
      - NODE_ENV=development
    depends_on:
      - api
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - autocodit
    restart: unless-stopped

  # Runner Manager
  runner-manager:
    build:
      context: ./runner
      dockerfile: Dockerfile
      target: development
    privileged: true  # Required for Docker-in-Docker
    environment:
      - DOCKER_HOST=unix:///var/run/docker.sock
      - API_ENDPOINT=http://api:8000
      - RUNNER_NETWORK=autocodit-runners
      - MAX_CONCURRENT_RUNNERS=5
      - RUNNER_DEFAULT_TIMEOUT=3600
      - LOG_LEVEL=DEBUG
    depends_on:
      - api
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - runner-workspace:/workspace
      - ./runner:/app
    networks:
      - autocodit
      - runners
    restart: unless-stopped

  # Task Queue Worker
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.worker
      target: development
    environment:
      - DATABASE_URL=postgresql://autocodit:password@db:5432/autocodit_agent
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - GITHUB_APP_ID=${GITHUB_APP_ID}
      - GITHUB_PRIVATE_KEY=${GITHUB_PRIVATE_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - LOG_LEVEL=DEBUG
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - autocodit
    restart: unless-stopped
    command: celery -A workers.celery_app worker --loglevel=debug --concurrency=4

  # Beat Scheduler (for periodic tasks)
  beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.worker
      target: development
    environment:
      - DATABASE_URL=postgresql://autocodit:password@db:5432/autocodit_agent
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - LOG_LEVEL=DEBUG
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
    networks:
      - autocodit
    restart: unless-stopped
    command: celery -A workers.celery_app beat --loglevel=debug

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=autocodit_agent
      - POSTGRES_USER=autocodit
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./database/schema.sql:/docker-entrypoint-initdb.d/02-schema.sql
    networks:
      - autocodit
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U autocodit -d autocodit_agent"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - autocodit
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
      - MINIO_DEFAULT_BUCKETS=autocodit-storage
    volumes:
      - minio_data:/data
    networks:
      - autocodit
    restart: unless-stopped
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 60s

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    networks:
      - autocodit
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource,postgres-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - autocodit
    restart: unless-stopped
    depends_on:
      - prometheus

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"  # UI
      - "14268:14268"  # HTTP collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - autocodit
    restart: unless-stopped

  # Local LLM (Ollama) - Optional
  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - autocodit
    restart: unless-stopped
    environment:
      - OLLAMA_HOST=0.0.0.0
    profiles:
      - local-llm

  # Development Tools
  # -----------------
  
  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@autocodit.dev
      - PGADMIN_DEFAULT_PASSWORD=admin123
      - PGADMIN_CONFIG_SERVER_MODE=False
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - autocodit
    restart: unless-stopped
    profiles:
      - tools

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=admin
      - HTTP_PASSWORD=admin123
    ports:
      - "8081:8081"
    networks:
      - autocodit
    restart: unless-stopped
    depends_on:
      - redis
    profiles:
      - tools

  # Mailhog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - autocodit
    restart: unless-stopped
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  ollama_data:
    driver: local
  pgadmin_data:
    driver: local
  runner-workspace:
    driver: local

networks:
  autocodit:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  runners:
    driver: bridge
    name: autocodit-runners
    ipam:
      config:
        - subnet: 172.21.0.0/16